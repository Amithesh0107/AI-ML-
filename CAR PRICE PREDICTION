import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

# loading the data from csv file to pandas dataframe
car_dataset = pd.read_csv('/content/car.csv')

#inspecting the first 5 rows of the dataframe
car_dataset.head()

#checking the number of rows and columns
car_dataset.shape

#getting info about dataset
car_dataset.info()

# checking number of missing values
car_dataset.isnull().sum()

print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())


# encoding "Fuel_Type" Column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)
#encoding "Seller_Type" Column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)
#encoding "Transmission" column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y = car_dataset['Selling_Price']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size= 0.1, random_state=2)

lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

# prediction on training data
training_data_prediction = lin_reg_model.predict(X_train)

# R squared error
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared error : ",error_score)

input_data = [[2014, 5.59, 27000, 0, 0, 0, 1]]
# Year, Present_Price, Kms_Driven, Fuel_Type, Seller_Type, Transmission, Owner
pre=pd.DataFrame(input_data,columns=['Year','Present_Price','Kms_Driven','Fuel_Type','Seller_Type','Transmission','Owner'])
# Predict using Linear Regression model
predicted_price = lin_reg_model.predict(pre)
print("Predicted Car Price (Linear Regression):", predicted_price[0])

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

# prediction on test data
test_data_prediction = lin_reg_model.predict(X_test)

# R squared error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("R squared error : ",error_score)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

from sklearn.model_selection import KFold, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
import numpy as np

# Define k
k = 5  # Common choices: 5 or 10

# Initialize k-Fold
kf = KFold(n_splits=k, shuffle=True, random_state=2)

# Define Model
model = LinearRegression()

# Perform k-Fold Cross-Validation (Using Negative MAE)
mae_scores = -cross_val_score(model, X, Y, cv=kf, scoring='neg_mean_absolute_error')

# Final k-Fold Score
kfold_mae = np.mean(mae_scores)
print(f"{k}-Fold Cross-Validation MAE: {kfold_mae}")


import numpy as np

# Define price categories (adjust the thresholds based on your dataset)
car_dataset['Price_Category'] = np.where(car_dataset['Selling_Price'] < 5, 'Low',
                                np.where(car_dataset['Selling_Price'] < 10, 'Medium', 'High'))

# Encode categories into numbers
car_dataset.replace({'Price_Category': {'Low': 0, 'Medium': 1, 'High': 2}}, inplace=True)

from sklearn.model_selection import train_test_split

X = car_dataset.drop(['Car_Name', 'Selling_Price', 'Price_Category'], axis=1)  # Features
Y = car_dataset['Price_Category']  # Classification labels

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, random_state=2)

from sklearn.ensemble import RandomForestClassifier

clf = RandomForestClassifier()
clf.fit(X_train, Y_train)

# Predict categories
Y_pred = clf.predict(X_test)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

cm = confusion_matrix(Y_test, Y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Low', 'Medium', 'High'])
disp.plot(cmap="Blues")
plt.show()
